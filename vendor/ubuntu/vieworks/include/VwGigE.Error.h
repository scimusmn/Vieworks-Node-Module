//#pragma once 
#ifndef VWGIGE_ERROR_H
#define VWGIGE_ERROR_H
enum RESULT
{
    RESULT_SUCCESS,
    RESULT_ERROR,
    RESULT_ERROR_OPENED_ALREADY,
    RESULT_ERROR_INVALID_HANDLE,
    RESULT_ERROR_TL_HANDLE,
    RESULT_ERROR_TLOPEN,
    RESULT_ERROR_IF_HANDLE,
    RESULT_ERROR_VWGIGE_INITIALIZATION,		// VWGIGE Module was not initialized
    RESULT_ERROR_INVALID_PARAMETER,				// Parameter is invalid
    RESULT_ERROR_DISCOVERY,
    RESULT_ERROR_NO_CAMERAS,				// There are no cameras
    RESULT_ERROR_CAMERA_NAME_DOES_NOT_EXIST,
    RESULT_ERROR_ABORTED_ALREADY,
    RESULT_ERROR_ACCESS_DENIED,
    RESULT_ERROR_RESOURCE_IN_USE,

    RESULT_ERROR_XML_UNKNOWN_ARGUMENT,
    RESULT_ERROR_XML_NODE_ACCESS_FAILED,
    RESULT_ERROR_XML_INVALID_COMMAND,
    RESULT_ERROR_XML_ENTERED_NODE_DOESNT_HAVE_ANY_VALUE,

    RESULT_ERROR_INVALID_WIDTH,

    RESULT_ERROR_VWINTERFACE_GETINTERFACENAME,
    RESULT_ERROR_VWINTERFACE_OPENINTERFACE,
    RESULT_ERROR_VWINTERFACE_CLOSEINTERFACE,
    RESULT_ERROR_VWINTERFACE_GETNUMDEVICES,

    RESULT_ERROR_VWCAMERA_INTERFACE_HANDLE,
    RESULT_ERROR_VWCAMERA_CAMERAINDEX_OVER,
    RESULT_ERROR_VWCAMERA_GETXML,
    RESULT_ERROR_VWCAMERA_IMAGE_NOT4DIVIDE,
    RESULT_ERROR_VWCAMERA_IMAGE_NOT2DIVIDE,
    RESULT_ERROR_VWCAMERA_READ_ONLY,
    RESULT_ERROR_VWCAMERA_EVENTCONTROL_DOESNOT_INIT,

    RESULT_ERROR_DEVCREATEDATASTREAM,

    RESULT_ERROR_DATASTREAM_MTU,			// Datastream MTU error

    RESULT_ERROR_TLGETNUMINTERFACES,
    RESULT_ERROR_TLOPENINTERFACE,
    RESULT_ERROR_TLCLOSEINTERFACE,
    RESULT_ERROR_TLGETINTERFACENAME,
    RESULT_ERROR_TLGETNUMDEVICES,
    RESULT_ERROR_TLGETDEVICENAME,
    RESULT_ERROR_TLOPENDEVICE,

    RESULT_ERROR_INSUFFICIENT_RESOURCES,			// Buffer size is too small.
    RESULT_ERROR_MEMORY_ALLOCATION,

    RESULT_ERROR_FILE_STREAM_OPEN_FAILURE,
    RESULT_ERROR_FILE_STREAM_READ_FAILURE,
    RESULT_ERROR_FILE_STREAM_WRITE_FAILURE,
    RESULT_ERROR_FILE_STREAM_CLOSE_FAILURE,
    RESULT_ERROR_FILE_STREAM_NOT_CORRECT_FILE_LENGTH,

    RESULT_LAST                             // Don't Use it.
};


const int MAX_ERROR_DESCRIPTION = 256;

static const char ERROR_DESCRIPTION[RESULT_LAST][MAX_ERROR_DESCRIPTION] =
{
    {"SUCCESS\0"},
    {"ERROR : Default error code returned\0"},
    {"ERROR_OPENED_ALREADY\0"},
    {"ERROR_INVALID_HANDLE\0"},
    {"ERROR_TL_HANDLE\0"},
    {"ERROR_TLOPEN\0"},
    {"ERROR_IF_HANDLE\0"},
    {"ERROR_VWGIGE_INITIALIZATION\0"},
    {"ERROR_INVALID_PARAMETER\0"},
    {"ERROR_DISCOVERY\0"},
    {"ERROR : RESULT_ERROR_NO_CAMERAS was returned \\ CHECK : NIC properties\0"},
    {"ERROR_CAMERA_NAME_DOES_NOT_EXIST\0"},
    {"ERROR_ABORTED_ALREADY\0"},
    {"ERROR_ACCESS_DENIED\0"},
    {"ERROR_RESOURCE_IN_USE\0"},
    {"ERROR_XML_UNKNOWN_ARGUMENT\0"},
    {"ERROR_XML_NODE_ACCESS_FAILED\0"},
    {"ERROR_XML_INVALID_COMMAND\0"},
    {"ERROR_XML_ENTERED_NODE_DOESNT_HAVE_ANY_VALUE\0"},
    {"ERROR_INVALID_WIDTH\0"},
    {"ERROR_VWINTERFACE_GETINTERFACENAME\0"},
    {"ERROR_VWINTERFACE_OPENINTERFACE\0"},
    {"ERROR_VWINTERFACE_CLOSEINTERFACE\0"},
    {"ERROR_VWINTERFACE_GETNUMDEVICES\0"},
    {"ERROR_VWCAMERA_INTERFACE_HANDLE\0"},
    {"ERROR : RESULT_ERROR_VWCAMERA_CAMERAINDEX_OVER was returned \\ CHECK : Zero-based camera index\0"},
    {"ERROR_VWCAMERA_GETXML\0"},
    {"ERROR_VWCAMERA_IMAGE_NOT4DIVIDE\0"},
    {"ERROR_VWCAMERA_IMAGE_NOT2DIVIDE\0"},
    {"ERROR_VWCAMERA_READ_ONLY\0"},
    {"ERROR : RESULT_ERROR_DEVCREATESTREAM was returned\0"},
    {"ERROR : RESULT_ERROR_STREAM_MTU was returned \\ CHECK : Check NIC MTU\0"},
    {"ERROR_TLGETNUMINTERFACES\0"},
    {"ERROR_TLOPENINTERFACE\0"},
    {"ERROR_TLCLOSEINTERFACE\0"},
    {"ERROR_TLGETINTERFACENAME\0"},
    {"ERROR_TLGETNUMDEVICES\0"},
    {"ERROR_TLGETDEVICENAME\0"},
    {"ERROR_TLOPENDEVICE\0"},
    {"ERROR : RESULT_ERROR_INSUFFICIENT_RESOURCES was returned \\ CHECK : Check system resources\0"},
    {"ERROR : RESULT_ERROR_MEMORY_ALLOCATION was returned \\ CHECK : Check system resources\0"},
    {"ERROR_FILE_STREAM_OPEN_FAILURE"},
    {"ERROR_FILE_STREAM_READ_FAILURE"},
    {"ERROR_FILE_STREAM_WRITE_FAILURE"},
    {"ERROR_FILE_STREAM_CLOSE_FAILURE"},
    {"ERROR_FILE_STREAM_NOT_CORRECT_FILE_LENGTH"}
};




inline const char* VwErrorReport(RESULT result)
{
    if( result >= RESULT_LAST || result < RESULT_SUCCESS )
        return 0;

    return ERROR_DESCRIPTION[result];
}


#endif
